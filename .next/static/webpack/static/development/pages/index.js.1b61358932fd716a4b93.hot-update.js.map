{"version":3,"file":"static/webpack/static/development/pages/index.js.1b61358932fd716a4b93.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Matter from 'matter-js';\n\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {}\n  }\n\n\n  static async getInitialProps({req, res}) {\n\n     return {};\n  }\n\n  scale(num, in_min, in_max, out_min, out_max) {\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n  }\n\n  componentDidMount() {\n    this.d();\n    console.log('GrandChild did mount.');\n    setTimeout(() => {\n      this.shot();\n    }, 1000);\n  }\n\n  shot(){\n    this.highestPoint = 1000;\n    this.highestPointArrived = false;\n    Matter.Body.setMass(this.frosch, 1)\n    Matter.Body.applyForce(this.frosch, this.frosch.position, { x: 0, y: -0.079 });\n  }\n\n  d(){\n    var Engine = Matter.Engine,\n        Render = Matter.Render,\n        World = Matter.World,\n        Events = Matter.Events,\n        Bodies = Matter.Bodies;\n\n    var engine = Engine.create();\n\n    var render = Render.create({\n        element: document.body,\n        engine: engine\n    });\n\n    this.range = 580;\n    this.highestPoint = 1000;\n    this.highestPointArrived = true;\n\n    this.frosch = Bodies.rectangle(400, 600, 20, 20);\n    this.frosch.restitution = 0.8;\n\n    this.end = Bodies.rectangle(400, -5, 100, 10, { label: \"bell\", isStatic: true});\n\n\n    var ground = Bodies.rectangle(400, 630, 810, 60, { isStatic: true });\n\n    World.add(engine.world, [this.frosch, this.end, ground]);\n\n        // run the engine\n    Engine.run(engine);\n\n    // run the renderer\n    Render.run(render);\n\n    Events.on(engine, 'afterUpdate', (event) => {\n        var engine = event.source;\n\n        if (this.highestPointArrived === false && this.frosch.position.y > this.highestPoint){\n          this.highestPointArrived = true;\n\n\n          let m = Math.round(this.highestPoint - 10);\n          console.log(\"HIGHET POINT\", m);\n          let cm = this.range - m;\n          console.log(\"CM\", cm);\n\n          let led = Math.round(this.scale(cm, 0, this.range, 0, 240));\n\n          console.log(\"HIGHEST LED\", led);\n\n          Matter.World.addBody(engine.world, Bodies.rectangle(400, m, 200, 2, { isStatic: true, isSensor: true }));\n\n\n\n        }else{\n          this.highestPoint = this.frosch.position.y;\n        }\n\n        this.renderLeds();\n\n\n\n        //console.log(this.frosch.position);\n    });\n    Events.on(engine, 'collisionStart', (event) => {\n      console.log(\"coll\");\n      var pairs = event.pairs;\n\n      // change object colours to show those in an active collision (e.g. resting contact)\n      for (var i = 0; i < pairs.length; i++) {\n          var pair = pairs[i];\n          console.log(pair);\n      }\n    });\n\n  }\n\n  renderLeds(){\n    let m = Math.round(this.frosch.position.y - 10);\n\n    let cm = this.range - m;\n\n\n    let led = Math.round(this.scale(cm, 0, this.range, 0, 240));\n\n    console.log(`HIGHEST LED ${led} -  ${cm} cm`);\n  }\n\n  render () {\n    return (\n      <div>\n        Hau den Lukas\n      </div>\n    )\n  }\n}\n\nexport default App\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AAOA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AAEA;AAGA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;AAtHA;AAEA;AACA;;;;;;;;;;;;;;;;;;AAVA;AACA;AA+HA;;;;A","sourceRoot":""}