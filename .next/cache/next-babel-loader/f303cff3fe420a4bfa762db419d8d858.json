{"ast":null,"code":"var _jsxFileName = \"/Users/andresavic/Code/Privat/HauDenLukas/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Matter from 'matter-js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  static async getInitialProps({\n    req,\n    res\n  }) {\n    return {};\n  }\n\n  scale(num, in_min, in_max, out_min, out_max) {\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n  }\n\n  componentDidMount() {\n    this.d();\n    console.log('GrandChild did mount.');\n    setInterval(() => {\n      this.shot();\n    }, 1000);\n  }\n\n  shot() {\n    this.highestPoint = 1000;\n    this.highestPointArrived = false;\n    Matter.Body.setMass(this.frosch, 1);\n    Matter.Body.applyForce(this.frosch, this.frosch.position, {\n      x: 0,\n      y: -0.079\n    });\n  }\n\n  d() {\n    var Engine = Matter.Engine,\n        Render = Matter.Render,\n        World = Matter.World,\n        Events = Matter.Events,\n        Bodies = Matter.Bodies;\n    var engine = Engine.create();\n    var render = Render.create({\n      element: document.body,\n      engine: engine\n    });\n    this.range = 600;\n    this.highestPoint = 1000;\n    this.highestPointArrived = true;\n    this.frosch = Bodies.rectangle(400, 600, 20, 20);\n    this.frosch.restitution = 0.8;\n    this.end = Bodies.rectangle(400, -5, 100, 10, {\n      label: \"bell\",\n      isStatic: true\n    });\n    var ground = Bodies.rectangle(400, 630, 810, 60, {\n      isStatic: true\n    });\n    World.add(engine.world, [this.frosch, this.end, ground]); // run the engine\n\n    Engine.run(engine); // run the renderer\n\n    Render.run(render);\n    Events.on(engine, 'afterUpdate', event => {\n      var engine = event.source;\n\n      if (this.highestPointArrived === false && this.frosch.position.y > this.highestPoint) {\n        this.highestPointArrived = true;\n        let m = Math.round(this.highestPoint - 10);\n        console.log(\"HIGHET POINT\", m);\n        let cm = this.range - m;\n        console.log(\"CM\", cm);\n        let led = Math.round(this.scale(cm, 0, 600, 0, 240));\n        console.log(\"HIGHEST LED\", led);\n        Matter.World.addBody(engine.world, Bodies.rectangle(400, m, 200, 2, {\n          isStatic: true,\n          isSensor: true\n        }));\n      } else {\n        this.highestPoint = this.frosch.position.y;\n      }\n\n      this.renderLeds(); //console.log(this.frosch.position);\n    });\n    Events.on(engine, 'collisionStart', event => {\n      console.log(\"coll\");\n      var pairs = event.pairs; // change object colours to show those in an active collision (e.g. resting contact)\n\n      for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i];\n        console.log(pair);\n      }\n    });\n  }\n\n  renderLeds() {\n    let m = Math.round(this.frosch.position.y - 10);\n    let cm = this.range - m;\n    let led = Math.round(this.scale(cm, 0, 600, 0, 240));\n    console.log(`HIGHEST LED ${led} -  ${cm} cm`);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Hau den Lukas\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/andresavic/Code/Privat/HauDenLukas/pages/index.js"],"names":["React","Component","Matter","App","constructor","props","state","getInitialProps","req","res","scale","num","in_min","in_max","out_min","out_max","componentDidMount","d","console","log","setInterval","shot","highestPoint","highestPointArrived","Body","setMass","frosch","applyForce","position","x","y","Engine","Render","World","Events","Bodies","engine","create","render","element","document","body","range","rectangle","restitution","end","label","isStatic","ground","add","world","run","on","event","source","m","Math","round","cm","led","addBody","isSensor","renderLeds","pairs","i","length","pair"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Matter from 'matter-js';\n\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {}\n  }\n\n\n  static async getInitialProps({req, res}) {\n\n     return {};\n  }\n\n  scale(num, in_min, in_max, out_min, out_max) {\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n  }\n\n  componentDidMount() {\n    this.d();\n    console.log('GrandChild did mount.');\n    setInterval(() => {\n      this.shot();\n    }, 1000);\n  }\n\n  shot(){\n    this.highestPoint = 1000;\n    this.highestPointArrived = false;\n    Matter.Body.setMass(this.frosch, 1)\n    Matter.Body.applyForce(this.frosch, this.frosch.position, { x: 0, y: -0.079 });\n  }\n\n  d(){\n    var Engine = Matter.Engine,\n        Render = Matter.Render,\n        World = Matter.World,\n        Events = Matter.Events,\n        Bodies = Matter.Bodies;\n\n    var engine = Engine.create();\n\n    var render = Render.create({\n        element: document.body,\n        engine: engine\n    });\n\n    this.range = 600;\n    this.highestPoint = 1000;\n    this.highestPointArrived = true;\n\n    this.frosch = Bodies.rectangle(400, 600, 20, 20);\n    this.frosch.restitution = 0.8;\n\n    this.end = Bodies.rectangle(400, -5, 100, 10, { label: \"bell\", isStatic: true});\n\n\n    var ground = Bodies.rectangle(400, 630, 810, 60, { isStatic: true });\n\n    World.add(engine.world, [this.frosch, this.end, ground]);\n\n        // run the engine\n    Engine.run(engine);\n\n    // run the renderer\n    Render.run(render);\n\n    Events.on(engine, 'afterUpdate', (event) => {\n        var engine = event.source;\n\n        if (this.highestPointArrived === false && this.frosch.position.y > this.highestPoint){\n          this.highestPointArrived = true;\n\n\n          let m = Math.round(this.highestPoint - 10);\n          console.log(\"HIGHET POINT\", m);\n          let cm = this.range - m;\n          console.log(\"CM\", cm);\n\n          let led = Math.round(this.scale(cm, 0, 600, 0, 240));\n\n          console.log(\"HIGHEST LED\", led);\n\n          Matter.World.addBody(engine.world, Bodies.rectangle(400, m, 200, 2, { isStatic: true, isSensor: true }));\n\n\n\n        }else{\n          this.highestPoint = this.frosch.position.y;\n        }\n\n        this.renderLeds();\n\n\n\n        //console.log(this.frosch.position);\n    });\n    Events.on(engine, 'collisionStart', (event) => {\n      console.log(\"coll\");\n      var pairs = event.pairs;\n\n      // change object colours to show those in an active collision (e.g. resting contact)\n      for (var i = 0; i < pairs.length; i++) {\n          var pair = pairs[i];\n          console.log(pair);\n      }\n    });\n\n  }\n\n  renderLeds(){\n    let m = Math.round(this.frosch.position.y - 10);\n\n    let cm = this.range - m;\n\n\n    let led = Math.round(this.scale(cm, 0, 600, 0, 240));\n\n    console.log(`HIGHEST LED ${led} -  ${cm} cm`);\n  }\n\n  render () {\n    return (\n      <div>\n        Hau den Lukas\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}